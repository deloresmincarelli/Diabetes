# This script tests a connection to a sqlite database, and, 
# connects to OpenAI generative AI language model to translate the request (natural language) to SQL
# Displays results from the SQL query, and, displays the SQL query for validation.  


# RESOURCE: 
# https://python.langchain.com/docs/modules/chains/popular/sqlite
# https://python.langchain.com/docs/modules/agents/toolkits/sql_database

# LIBRARIES ----
import pandas as pd
import sqlalchemy as sql
import os

# allows us to connect to language models
from langchain import OpenAI  # you can use different backends like Hugging face
from langchain.sql_database import SQLDatabase
from langchain.chains import SQLDatabaseChain

# SET YOUR OPENAI API KEY ----
# Openai key is set as an environment variable called:  "OPENAI_API_KEY"

# 1.0 INSPECT THE DATABASE

# Make connection
sql_engine = sql.create_engine("sqlite:///DIABETES_DATABASE")
conn = sql_engine.connect()

# Table Names - run all 3 of these; the last one will show name of tables
metadata = sql.MetaData()
metadata.reflect(bind=sql_engine)
metadata.tables.keys()

# Read the tables - run this line of code to see data from the table in Terminal window
pd.read_sql_table('DIABETES_PREDICTIONS_TABLE', conn)

# 2.0 SETTING UP AN LLM TO GENERATE SQL QUERIES
# temperature controls randomness; value of 0 is deterministic & repetitive & no randomness & no creativity

llm = OpenAI(
    temperature    = 0, 
    max_tokens     = 256,
    openai_api_key = os.getenv("OPENAI_API_KEY")
)

# uses langchang function to set up db
db = SQLDatabase(engine=sql_engine)

sql_chain = SQLDatabaseChain.from_llm(
    llm                       = llm, 
    db                        = db, 
    
    verbose                   = True,
    use_query_checker         = True,
    return_intermediate_steps = False,
)


# 3.0 MAKING QUERIES ---- 

# using LLM, you can ask questions of the database in natural language, and the llm will interpret and write the necessary sql
# get table in the db using ai
sql_chain.run("What tables are in the database?")

# Results:
# Entering new  chain...
# What tables are in the database?
# SQLQuery:SELECT name FROM sqlite_master WHERE type='table';
# SQLResult: [('DIABETES_PREDICTIONS_TABLE',)]
# Answer:The database contains the table DIABETES_PREDICTIONS_TABLE.
# > Finished chain.
# 'The database contains the table DIABETES_PREDICTIONS_TABLE.'

# Take SQL query generated by LLM, and paste into a pandas command
# get all the tables in the db using pandas sql
pd.read_sql(
    sql.text("SELECT name FROM sqlite_master WHERE type='table';"), 
    con=conn
)

# Results:
#                          name
# 0  DIABETES_PREDICTIONS_TABLE

# Note, although you can see the sql query in the terminal, the LLM only delivers the "Answer" when you save result, "res" as variable
# Net, we need to persist the SQL query because we want to see the actual sql in our app 
res = sql_chain.run("How many patients are there where the Age is over 50, and the predict = 1?")
res

# 4.0 EXTRACTING THE AI-GENERATED SQL COMMAND ----
# in this setup, we have return_intermediate_steps = True

sql_chain_with_steps = SQLDatabaseChain.from_llm(
    llm                       = llm, 
    db                        = db, 
    verbose                   = True,
    use_query_checker         = True,  
    return_intermediate_steps = True,
)

res = sql_chain_with_steps("Show me the records where the Age is under 25, and the predict = 1, and the patient had over 2 er visits?")
res
#now, the res is a dictionary and 'intermediate_steps' is one of the keys, (value is a list), 
# and the first element is the sql command 
sql_text = res['intermediate_steps'][1]
sql_text
# 'SELECT * FROM "DIABETES_PREDICTIONS_TABLE" INNER JOIN "PATIENT_ER_VISITS_TABLE" ON "DIABETES_PREDICTIONS_TABLE"."Patient_Number" = "PATIENT_ER_VISITS_TABLE"."Patient_Number" 
# WHERE "Age" < 25 AND "predict" = 1 AND "number_er_visits_last30" > 2 LIMIT 5;'


# this is running the saved query
pd.read_sql_query(sql.text(sql_text), conn)

# verify by copying sql text into pandas 
pd.read_sql(
    sql.text('SELECT * FROM DIABETES_PREDICTIONS_TABLE INNER JOIN PATIENT_ER_VISITS_TABLE ON DIABETES_PREDICTIONS_TABLE.Patient_Number= PATIENT_ER_VISITS_TABLE.Patient_Number  WHERE Age < 25 AND predict = 1 AND number_er_visits_last30 > 2 LIMIT 5'),
    con=conn
)

conn.close()
# Conclusion: We can use AI to query databases using natural language

